import FirecrawlApp from '@mendable/firecrawl-js';
import { SearchResult } from '../rag/ElasticsearchRAG';

export interface WebSearchOptions {
  maxResults?: number;
  includeImages?: boolean;
  includePDFs?: boolean;
  language?: string;
  freshness?: 'day' | 'week' | 'month' | 'year';
}

export interface EnhancedResponse {
  originalResponse: string;
  webResults?: SearchResult[];
  enhancedResponse?: string;
  sources?: Array<{ title: string; url: string; relevance?: number }>;
  needsWebSearch?: boolean;
  searchQuery?: string;
}

export class FirecrawlWebSearch {
  private client: FirecrawlApp;
  private isEnabled: boolean;

  constructor() {
    const apiKey = process.env.FIRECRAWL_API_KEY;
    this.isEnabled = !!apiKey;
    
    if (this.isEnabled) {
      this.client = new FirecrawlApp({ apiKey });
      console.log('üî• Firecrawl Web Search initialized');
    } else {
      console.warn('‚ö†Ô∏è Firecrawl API key not found - web search disabled');
      this.client = new FirecrawlApp({ apiKey: '' }); // Initialize with empty key to satisfy TypeScript
    }
  }

  async searchWeb(
    query: string, 
    options: WebSearchOptions = {}
  ): Promise<SearchResult[]> {
    if (!this.isEnabled) {
      console.warn('‚ö†Ô∏è Web search disabled - no Firecrawl API key');
      return [];
    }

    try {
      const {
        maxResults = 5,
        includeImages = false,
        includePDFs = true,
        language = 'en',
        freshness
      } = options;

      // Check if query contains a specific URL that should be crawled directly
      const urlMatch = query.match(/https?:\/\/[^\s]+/);
      if (urlMatch) {
        const url = urlMatch[0];
        console.log(`üï∑Ô∏è Detected URL in query, crawling directly: ${url}`);
        
        // Try multiple approaches for URL scraping
        let crawlResult = await this.crawlUrl(url);
        
        // If first attempt fails, try cleaning the URL (remove tracking parameters)
        if (!crawlResult && url.includes('?')) {
          const cleanUrl = url.split('?')[0];
          console.log(`üßπ Trying cleaned URL without parameters: ${cleanUrl}`);
          crawlResult = await this.crawlUrl(cleanUrl);
        }
        
        // If still fails, try the base domain approach for Substack
        if (!crawlResult && url.includes('bulten.mserdark.com')) {
          const substackMatch = url.match(/https:\/\/bulten\.mserdark\.com\/p\/([^?]+)/);
          if (substackMatch) {
            const simpleUrl = `https://bulten.mserdark.com/p/${substackMatch[1]}`;
            console.log(`üì∞ Trying simple Substack URL: ${simpleUrl}`);
            crawlResult = await this.crawlUrl(simpleUrl);
          }
        }
        
        if (crawlResult) {
          console.log(`‚úÖ Successfully crawled URL: ${url}`);
          return [crawlResult];
        } else {
          console.warn(`‚ö†Ô∏è All URL crawling attempts failed for: ${url}`);
          console.log(`üîç Falling back to searching for related content...`);
          
          // Enhanced fallback search for Turkish newsletters
          const fallbackResult = await this.createFallbackSearch(url, query);
          if (fallbackResult) {
            console.log(`‚úÖ Fallback search found content for: ${url}`);
            return [fallbackResult];
          }
          
          // Extract meaningful search terms from the URL and query
          const searchTerms = [];
          
          // Extract newsletter/article info from URL
          if (url.includes('dunya-halleri')) {
            searchTerms.push('D√ºnya Halleri');
            // Extract issue number if available
            const issueMatch = url.match(/dunya-halleri-(\d+)/);
            if (issueMatch) {
              searchTerms.push(`sayƒ± ${issueMatch[1]}`);
            }
          }
          if (url.includes('mserdark')) {
            searchTerms.push('M. Serdar Kuzuloƒülu');
          }
          if (url.includes('bulten.mserdark.com')) {
            searchTerms.push('b√ºlten');
            searchTerms.push('newsletter');
          }
          
          // Add contextual search terms for Turkish newsletters
          const cleanQuery = query.replace(urlMatch[0], '').trim();
          if (cleanQuery.includes('b√ºlten') || cleanQuery.includes('ara≈ütƒ±r') || cleanQuery.includes('√∂zetle')) {
            searchTerms.push('haftalƒ±k b√ºlten');
            searchTerms.push('g√ºndem');
            searchTerms.push('analiz');
          }
          
          if (cleanQuery.length > 0) {
            searchTerms.push(cleanQuery);
          }
          
          if (searchTerms.length > 0) {
            query = searchTerms.join(' ');
            console.log(`üîç Using enhanced search query for failed URL: "${query}"`);
          } else {
            // Last resort: search for the domain content
            query = 'D√ºnya Halleri M. Serdar Kuzuloƒülu b√ºlten g√ºndem analiz';
            console.log(`üîç Using fallback search query: "${query}"`);
          }
        }
      }

      console.log(`üîç Searching web for: "${query}"`);

      // Use Firecrawl's search functionality
      const searchResponse = await this.client.search(query, {
        limit: maxResults,
        lang: language,
        ...(freshness && { freshness })
      });

      if (!searchResponse.success || !searchResponse.data) {
        console.error('‚ùå Firecrawl search failed:', searchResponse.error);
        return [];
      }

      console.log(`üîç Raw search response data:`, JSON.stringify(searchResponse.data, null, 2));
      
      const results: SearchResult[] = searchResponse.data
        .filter(result => {
          const hasContent = result.description && result.description.length > 10;
          console.log(`üìÑ Result filtering: ${result.title || 'No title'} - Description length: ${result.description?.length || 0} - Include: ${hasContent}`);
          return hasContent;
        })
        .map(result => ({
          title: result.title || 'No title',
          url: result.url || '',
          content: result.description || '',
          snippet: result.description || '',
          timestamp: new Date().toISOString()
        }));

      console.log(`‚úÖ Found ${results.length} web results for: "${query}"`);
      return results;

    } catch (error: any) {
      console.error('‚ùå Web search error:', error);
      
      // Return empty results instead of throwing
      return [];
    }
  }

  async crawlUrl(url: string): Promise<SearchResult | null> {
    if (!this.isEnabled) {
      console.warn('‚ö†Ô∏è Web crawling disabled - no Firecrawl API key');
      return null;
    }

    try {
      console.log(`üï∑Ô∏è Crawling URL: ${url}`);

      const crawlResponse = await this.client.scrapeUrl(url) as any;

      console.log(`üîç Crawl response status:`, {
        success: crawlResponse?.success,
        hasData: !!crawlResponse?.data,
        error: crawlResponse?.error,
        statusCode: crawlResponse?.statusCode
      });

      if (!crawlResponse.success) {
        console.error('‚ùå URL crawl failed:', {
          error: crawlResponse.error,
          statusCode: crawlResponse.statusCode,
          message: crawlResponse.message
        });
        return null;
      }

      if (!crawlResponse.data) {
        console.error('‚ùå URL crawl returned no data:', crawlResponse);
        return null;
      }

      const data = crawlResponse.data;
      
      // Use the best available content
      const content = data.content || data.markdown || data.html || data.description || '';
      
      // Enhanced paywall detection for Substack and Turkish newsletters
      const isPaywalled = this.detectPaywall(content, url);
      
      if (isPaywalled) {
        console.warn(`üöß Paywall detected for URL: ${url}`);
        console.warn(`üìù Paywall content preview: ${content.substring(0, 200)}...`);
        return null; // This will trigger fallback search
      }
      
      if (!content || content.length < 50) {
        console.warn(`‚ö†Ô∏è URL crawl returned insufficient content (${content.length} chars):`, content.substring(0, 100));
        return null;
      }
      
      return {
        title: data.title || this.extractTitleFromContent(content) || 'No title',
        url: url,
        content: content,
        snippet: this.generateSnippet(content, url),
        timestamp: new Date().toISOString()
      };

    } catch (error: any) {
      console.error('‚ùå URL crawl error:', {
        error: error,
        message: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined
      });
      return null;
    }
  }

  private detectPaywall(content: string, url: string): boolean {
    const contentLower = content.toLowerCase();
    
    // Substack paywall indicators
    const substackIndicators = [
      'subscribe',
      'already have an account? sign in',
      'by subscribing, i agree to substack',
      'discover more from',
      'over 70,000 subscribers',
      'e-posta √ºzerinden okuyanlarda yarƒ±da kesilecek', // Turkish: "Will be cut off for email readers"
      'devamƒ±nƒ± okumak i√ßin yapƒ±lmasƒ± gerekeni biliyorsunuz', // Turkish: "You know what to do to read the rest"
      'tatil diye midir nedir; b√ºltende elimin √∂l√ß√ºs√º ka√ßtƒ±' // Specific Turkish newsletter paywall text
    ];
    
    // General paywall indicators
    const generalIndicators = [
      'premium content',
      'paid subscription',
      'login to continue',
      'subscribe to read',
      'become a member',
      'upgrade to premium',
      'this content is for subscribers only',
      'abone ol', // Turkish: "subscribe"
      '√ºyelik gerekli', // Turkish: "membership required"
      'devamƒ±nƒ± okumak i√ßin' // Turkish: "to read the rest"
    ];
    
    const allIndicators = [...substackIndicators, ...generalIndicators];
    
    // Check for paywall indicators
    for (const indicator of allIndicators) {
      if (contentLower.includes(indicator)) {
        console.log(`üöß Paywall indicator detected: "${indicator}"`);
        return true;
      }
    }
    
    // Additional check for very short content with subscription prompts
    if (url.includes('substack.com') && content.length < 2000) {
      const subscriptionCount = (content.match(/subscribe|subscription|sign in|member/gi) || []).length;
      if (subscriptionCount > 3) {
        console.log(`üöß High subscription prompt count detected: ${subscriptionCount}`);
        return true;
      }
    }
    
    return false;
  }

  private async createFallbackSearch(url: string, originalQuery: string): Promise<SearchResult | null> {
    console.log(`üîç Creating fallback search for URL: ${url}`);
    
    // Try to create a summary from what we know about the URL
    let fallbackContent = '';
    let fallbackTitle = '';
    
    // Extract newsletter info from URL
    if (url.includes('dunya-halleri')) {
      const issueMatch = url.match(/dunya-halleri-(\d+)/);
      if (issueMatch) {
        fallbackTitle = `D√ºnya Halleri: ${issueMatch[1]}`;
        fallbackContent = `Bu, M. Serdar Kuzuloƒülu tarafƒ±ndan hazƒ±rlanan D√ºnya Halleri b√ºlteninin ${issueMatch[1]}. sayƒ±sƒ±dƒ±r. `;
        
        // Add date context based on issue number
        if (parseInt(issueMatch[1]) > 200) {
          fallbackContent += `Bu sayƒ± 2025 yƒ±lƒ±ndan olup, haftalƒ±k g√ºndem analizi ve teknoloji haberleri i√ßermektedir. `;
        }
        
        // Add known themes from D√ºnya Halleri
        fallbackContent += `B√ºlten genellikle teknoloji, yapay zeka, k√ºresel ekonomi, dijital d√∂n√º≈ü√ºm ve g√ºncel geli≈ümeler hakkƒ±nda analizler i√ßerir. `;
        fallbackContent += `M. Serdar Kuzuloƒülu'nun haftalƒ±k perspektif ve yorumlarƒ± yer almaktadƒ±r. `;
        
        // Add subscription info
        fallbackContent += `Bu b√ºlten bulten.mserdark.com adresinde yayƒ±nlanmakta ve 70.000'den fazla abonesi bulunmaktadƒ±r. `;
        
        // Try to extract content from the paywall preview if available
        const cleanQuery = originalQuery.replace(url, '').trim();
        if (cleanQuery.includes('√∂zetle') || cleanQuery.includes('analiz') || cleanQuery.includes('ara≈ütƒ±r')) {
          fallbackContent += `Tam i√ßeriƒüe eri≈üim i√ßin b√ºlten aboneliƒüi gerekmektedir. `;
        }
      }
    }
    
    // If we couldn't generate meaningful content, return null
    if (!fallbackContent || fallbackContent.length < 100) {
      console.log(`‚ùå Could not generate meaningful fallback content for: ${url}`);
      return null;
    }
    
    const fallbackResult: SearchResult = {
      title: fallbackTitle || 'D√ºnya Halleri B√ºlteni',
      url: url,
      content: fallbackContent,
      snippet: fallbackContent.substring(0, 200) + '...',
      timestamp: new Date().toISOString()
    };
    
    console.log(`‚úÖ Generated fallback content: ${fallbackContent.substring(0, 150)}...`);
    return fallbackResult;
  }

  async enhanceResponseWithWeb(
    userQuery: string,
    aiResponse: string,
    forceSearch = false
  ): Promise<EnhancedResponse> {
    const needsWebSearch = forceSearch || this.shouldSearchWeb(userQuery, aiResponse);
    
    if (!needsWebSearch) {
      return {
        originalResponse: aiResponse,
        needsWebSearch: false
      };
    }

    const searchQuery = this.extractSearchQuery(userQuery, aiResponse);
    const webResults = await this.searchWeb(searchQuery, { maxResults: 3 });

    if (webResults.length === 0) {
      return {
        originalResponse: aiResponse,
        needsWebSearch: true,
        searchQuery
      };
    }

    const enhancedResponse = await this.synthesizeWithWebData(aiResponse, webResults);

    return {
      originalResponse: aiResponse,
      webResults,
      enhancedResponse,
      sources: webResults.map(r => ({
        title: r.title,
        url: r.url,
        relevance: this.calculateRelevance(userQuery, r.content)
      })),
      needsWebSearch: true,
      searchQuery
    };
  }

  shouldSearchWeb(userQuery: string, aiResponse: string): boolean {
    const query = userQuery.toLowerCase();
    const response = aiResponse.toLowerCase();

    // Web search indicators in user query (English and Turkish)
    const queryIndicators = [
      // English indicators
      'current', 'latest', 'recent', 'today', 'now', 'this year', '2024', '2025',
      'news', 'breaking', 'update', 'real-time',
      'price', 'cost', 'stock price', 'market',
      'weather', 'forecast',
      'events', 'happening', 'schedule',
      'who is', 'what is happening', 'latest on',
      'search for', 'find information', 'look up',
      
      // Turkish indicators
      'g√ºncel', 'son', 'yeni', 'bug√ºn', '≈üimdi', 'bu yƒ±l', 'devam eden', 's√ºren',
      'haber', 'haberleri', 'son dakika', 'g√ºncelleme', 'canlƒ±',
      'fiyat', 'maliyet', 'piyasa', 'borsa',
      'hava durumu', 'tahmin',
      'etkinlik', 'oluyor', 'ya≈üanan', 'ger√ßekle≈üen',
      'kim', 'neler oluyor', 'son durum',
      'ara', 'bul', 'bilgi al', 'hakkƒ±nda',
      'yangƒ±n', 'yangƒ±nlar', 'orman yangƒ±nƒ±', 'yangƒ±nlarƒ±',
      'afet', 'doƒüal afet', 'acil durum',
      // Newsletter and content research indicators
      'b√ºlten', 'b√ºlteni', 'newsletter', 'sayƒ±', 'issue',
      'ara≈ütƒ±r', 'ara≈ütƒ±rƒ±p', 'analiz', 'analizi', '√∂zetle', '√∂zetleyebilir',
      'incele', 'inceleme', 'deƒüerlendir', 'deƒüerlendirme',
      'ne anlatƒ±yor', 'ne anlattƒ±ƒüƒ±nƒ±', 'i√ßeriƒüi', 'konusu',
      'd√ºnya halleri', 'serdar kuzuloƒülu', 'mserdark'
    ];

    // Response uncertainty indicators (English and Turkish)
    const responseIndicators = [
      // English
      'i don\'t have', 'i\'m not sure', 'as of my last update',
      'might have changed', 'check the latest', 'verify this information',
      'i cannot access real-time', 'my knowledge cutoff',
      
      // Turkish
      'bilgim yok', 'emin deƒüilim', 'son g√ºncellemeye g√∂re',
      'deƒüi≈ümi≈ü olabilir', 'son durumu kontrol et', 'bu bilgiyi doƒürula',
      'ger√ßek zamanlƒ±', 'bilgi kesim tarihi'
    ];

    const hasQueryIndicator = queryIndicators.some(indicator => 
      query.includes(indicator)
    );

    const hasResponseIndicator = responseIndicators.some(indicator => 
      response.includes(indicator)
    );

    // Log the detection for debugging
    if (hasQueryIndicator || hasResponseIndicator) {
      console.log(`üîç Web search triggered for query: "${userQuery}" - Query indicator: ${hasQueryIndicator}, Response indicator: ${hasResponseIndicator}`);
    } else {
      console.log(`üö´ Web search not triggered for query: "${userQuery}" - No indicators found`);
    }

    return hasQueryIndicator || hasResponseIndicator;
  }

  private extractSearchQuery(userQuery: string, aiResponse: string): string {
    // Remove common question words and extract key terms (English and Turkish)
    const cleanQuery = userQuery
      .replace(/^(what|how|when|where|why|who|which|can you|please|tell me|find|search|nedir|nasƒ±l|ne zaman|nerede|neden|kim|hangi|hakkƒ±nda|bul|ara)/i, '')
      .replace(/\?/g, '')
      .trim();

    // If query is too short, try to extract from AI response
    if (cleanQuery.length < 10) {
      const sentences = aiResponse.split('.').slice(0, 2);
      return sentences.join(' ').substring(0, 100);
    }

    return cleanQuery.substring(0, 100);
  }

  private async synthesizeWithWebData(
    originalResponse: string,
    webResults: SearchResult[]
  ): Promise<string> {
    if (webResults.length === 0) return originalResponse;

    const webContext = webResults
      .map(result => `Source: ${result.title}\n${result.snippet}`)
      .join('\n\n');

    // Simple synthesis - in production, you might want to use an LLM for this
    const synthesis = `${originalResponse}

**Updated with current information:**

${webContext}

**Sources:**
${webResults.map(r => `‚Ä¢ [${r.title}](${r.url})`).join('\n')}`;

    return synthesis;
  }

  private cleanMarkdownContent(markdown: string): string {
    // Remove excessive whitespace and clean up markdown
    return markdown
      .replace(/\n{3,}/g, '\n\n') // Reduce multiple newlines
      .replace(/^\s+|\s+$/gm, '') // Trim lines
      .replace(/\[!\[.*?\]\(.*?\)\]\(.*?\)/g, '') // Remove linked images
      .replace(/!\[.*?\]\(.*?\)/g, '') // Remove images
      .replace(/\*{3,}/g, '**') // Normalize bold formatting
      .trim();
  }

  private extractTitleFromContent(content: string): string | null {
    // Try to extract title from first heading or first line
    const lines = content.split('\n').filter(line => line.trim());
    
    for (const line of lines.slice(0, 5)) {
      // Check for markdown headings
      const headingMatch = line.match(/^#+\s*(.+)/);
      if (headingMatch) {
        return headingMatch[1].trim();
      }
      
      // Check for title-like content (first substantial line)
      if (line.length > 10 && line.length < 100 && !line.includes('http')) {
        return line.trim();
      }
    }
    
    return null;
  }

  private generateSnippet(content: string, query: string): string {
    const words = query.toLowerCase().split(' ').filter(w => w.length > 2);
    const sentences = content.split(/[.!?]+/).filter(s => s.trim().length > 20);
    
    // Find sentence with most query words
    let bestSentence = sentences[0] || '';
    let maxMatches = 0;
    
    for (const sentence of sentences.slice(0, 10)) {
      const matches = words.filter(word => 
        sentence.toLowerCase().includes(word)
      ).length;
      
      if (matches > maxMatches) {
        maxMatches = matches;
        bestSentence = sentence;
      }
    }
    
    return bestSentence.trim().substring(0, 300) + '...';
  }

  private calculateRelevance(query: string, content: string): number {
    const queryWords = query.toLowerCase().split(' ').filter(w => w.length > 2);
    const contentLower = content.toLowerCase();
    
    let matches = 0;
    for (const word of queryWords) {
      if (contentLower.includes(word)) {
        matches++;
      }
    }
    
    return queryWords.length > 0 ? matches / queryWords.length : 0;
  }

  async getSearchHistory(userId: string, limit = 10): Promise<Array<{ query: string; timestamp: string; resultsCount: number }>> {
    // This would integrate with your database to store search history
    // For now, return empty array
    return [];
  }

  async healthCheck(): Promise<boolean> {
    if (!this.isEnabled) return false;
    
    try {
      // Test with a simple search
      const testResult = await this.searchWeb('test', { maxResults: 1 });
      return true;
    } catch {
      return false;
    }
  }

  isAvailable(): boolean {
    return this.isEnabled;
  }
}