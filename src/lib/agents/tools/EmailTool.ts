/**
 * Email Tool - Send emails via SMTP or email service
 */

// Use dynamic import to avoid bundling issues
let nodemailer: any = null;

// Initialize nodemailer only on server-side
if (typeof window === 'undefined') {
  try {
    nodemailer = require('nodemailer');
  } catch (error) {
    console.warn('‚ö†Ô∏è Nodemailer not available:', error);
  }
}

export interface EmailConfig {
  host: string;
  port: number;
  secure: boolean;
  auth: {
    user: string;
    pass: string;
  };
}

export interface EmailOptions {
  to: string | string[];
  subject: string;
  text?: string;
  html?: string;
  attachments?: Array<{
    filename: string;
    content: string | Buffer;
    contentType?: string;
  }>;
}

export class EmailTool {
  private transporter: any;
  private config: EmailConfig;

  constructor(config: EmailConfig) {
    this.config = config;
    if (nodemailer) {
      this.transporter = nodemailer.createTransport(config);
    } else {
      this.transporter = null;
      console.warn('‚ö†Ô∏è EmailTool: Nodemailer not available, email functionality disabled');
    }
  }

  async sendEmail(options: EmailOptions): Promise<{ success: boolean; messageId?: string; error?: string }> {
    try {
      if (!this.transporter) {
        console.log('üìß Email simulation (no SMTP configured):', options.subject);
        return {
          success: true,
          messageId: `sim_${Date.now()}`,
          error: 'Email simulated - SMTP not configured'
        };
      }

      const result = await this.transporter.sendMail(options);
      
      console.log('üìß Email sent successfully:', result.messageId);
      return {
        success: true,
        messageId: result.messageId
      };
    } catch (error) {
      console.error('‚ùå Email sending failed:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  async verifyConnection(): Promise<boolean> {
    try {
      if (!this.transporter) {
        console.log('üìß Email verification simulated');
        return true;
      }
      await this.transporter.verify();
      return true;
    } catch (error) {
      console.error('‚ùå Email connection failed:', error);
      return false;
    }
  }

  // Pre-built email templates
  static templates = {
    welcome: (name: string) => ({
      subject: `Welcome to OmniX, ${name}!`,
      html: `
        <h2>Welcome to OmniX!</h2>
        <p>Hi ${name},</p>
        <p>Thank you for joining OmniX. You now have access to powerful AI agents and tools.</p>
        <p>Best regards,<br>The OmniX Team</p>
      `
    }),
    
    taskComplete: (taskName: string, result: string) => ({
      subject: `Task Complete: ${taskName}`,
      html: `
        <h2>Task Completed Successfully</h2>
        <p><strong>Task:</strong> ${taskName}</p>
        <p><strong>Result:</strong></p>
        <div style="background: #f5f5f5; padding: 15px; border-radius: 5px;">
          ${result}
        </div>
        <p>Generated by OmniX AI Agent</p>
      `
    }),
    
    reportGenerated: (title: string, data: any) => ({
      subject: `Report Generated: ${title}`,
      html: `
        <h2>Report: ${title}</h2>
        <p>Your requested report has been generated.</p>
        <pre style="background: #f5f5f5; padding: 15px; border-radius: 5px; overflow-x: auto;">
          ${JSON.stringify(data, null, 2)}
        </pre>
        <p>Generated by OmniX AI Agent</p>
      `
    })
  };
}

// Default email configuration (can be overridden)
export const defaultEmailConfig: EmailConfig = {
  host: process.env.SMTP_HOST || 'smtp.gmail.com',
  port: parseInt(process.env.SMTP_PORT || '587'),
  secure: process.env.SMTP_SECURE === 'true',
  auth: {
    user: process.env.SMTP_USER || '',
    pass: process.env.SMTP_PASS || ''
  }
};

// Email tool instance
export const emailTool = new EmailTool(defaultEmailConfig);