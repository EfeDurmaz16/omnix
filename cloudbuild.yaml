# Google Cloud Build configuration for OmniX CI/CD
steps:
  # Install dependencies and run tests
  - name: 'node:18-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        npm ci
        npm run lint
        # npm run test (uncomment when tests are available)
    env:
      - 'NODE_ENV=development'

  # Generate Prisma client
  - name: 'node:18-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        npm ci
        npx prisma generate
    env:
      - 'NODE_ENV=production'

  # Build the application
  - name: 'node:18-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        npm ci
        npm run build
    env:
      - 'NODE_ENV=production'
      - 'NEXT_TELEMETRY_DISABLED=1'

  # Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/omnix:$COMMIT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/omnix:latest'
      - '.'

  # Push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/omnix:$COMMIT_SHA'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/omnix:latest'

  # Deploy to Cloud Run (staging)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'omnix-app-staging'
      - '--image'
      - 'gcr.io/$PROJECT_ID/omnix:$COMMIT_SHA'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--min-instances'
      - '0'
      - '--max-instances'
      - '10'
      - '--service-account'
      - 'omnix-service-account@$PROJECT_ID.iam.gserviceaccount.com'
      - '--vpc-connector'
      - 'projects/$PROJECT_ID/locations/us-central1/connectors/omnix-connector'
      - '--vpc-egress'
      - 'private-ranges-only'

  # Run database migrations (staging)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Create and execute migration job
        gcloud run jobs create omnix-migrate-${BUILD_ID} \
          --image=gcr.io/$PROJECT_ID/omnix:$COMMIT_SHA \
          --args="npx,prisma,migrate,deploy" \
          --service-account=omnix-service-account@$PROJECT_ID.iam.gserviceaccount.com \
          --region=us-central1 \
          --max-retries=1 \
          --parallelism=1 \
          --task-count=1 \
          --cpu=1 \
          --memory=1Gi \
          --task-timeout=300s || true
          
        # Execute the migration job
        gcloud run jobs execute omnix-migrate-${BUILD_ID} \
          --region=us-central1 \
          --wait || true
          
        # Clean up the job
        gcloud run jobs delete omnix-migrate-${BUILD_ID} \
          --region=us-central1 \
          --quiet || true

  # Security scan
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Run Container Analysis (if enabled)
        gcloud beta container images scan gcr.io/$PROJECT_ID/omnix:$COMMIT_SHA || true

# Build options
options:
  # Use high performance machine for faster builds
  machineType: 'E2_HIGHCPU_8'
  # Increase disk size for node_modules
  diskSizeGb: 100
  # Use Docker build cache
  env:
    - 'DOCKER_BUILDKIT=1'

# Build timeout (30 minutes)
timeout: '1800s'

# Store build artifacts
artifacts:
  images:
    - 'gcr.io/$PROJECT_ID/omnix:$COMMIT_SHA'
    - 'gcr.io/$PROJECT_ID/omnix:latest'

# Trigger configuration (to be set up separately)
# substitutions:
#   _SERVICE_NAME: omnix-app
#   _REGION: us-central1