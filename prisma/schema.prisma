// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  clerkId      String    @unique
  email        String    @unique
  name         String?
  avatar       String?
  plan         Plan      @default(FREE)
  credits      Int       @default(1500)
  role         UserRole  @default(USER)
  lastLoginAt  DateTime?
  teamId       String?   // Team membership
  teamRole     TeamRole? // Role within team
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  transactions     CreditTransaction[]
  conversations    Conversation[]
  images           Image[]
  videos           Video[]
  apiUsage         ApiUsage[]
  subscriptions    Subscription[]
  adminActions     AdminAction[]
  billingAddress   BillingAddress?
  team             Team?               @relation("TeamMembers", fields: [teamId], references: [id], onDelete: SetNull)
  ownedTeams       Team[]              @relation("TeamOwner")
  sentInvitations  TeamInvitation[]    @relation("InvitationSender")
  receivedInvitations TeamInvitation[] @relation("InvitationReceiver")
  // agents          Agent[]

  @@map("users")
}

model CreditTransaction {
  id          String            @id @default(cuid())
  userId      String
  amount      Int               // Positive for additions, negative for deductions
  type        TransactionType
  description String
  metadata    Json?             // Additional data (e.g., API call details, purchase info)
  createdAt   DateTime          @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_transactions")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  model     String   // Model used for this conversation
  messages  Json     // Array of messages
  metadata  Json?    // Additional conversation data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversations")
}

model Image {
  id          String     @id @default(cuid())
  userId      String
  prompt      String
  model       String     // Image model used (DALL-E, Midjourney, etc.)
  url         String     // Storage URL
  thumbnailUrl String?   // Thumbnail URL
  width       Int?
  height      Int?
  size        Int?       // File size in bytes
  metadata    Json?      // Generation parameters, style, etc.
  isPublic    Boolean    @default(false)
  tags        Json       @default("[]")
  parentId    String?    // Reference to original image if this is an edited version
  editPrompt  String?    // Prompt used for editing this version
  editOperation Json?    // Details of the edit operation performed
  version     Int        @default(1) // Version number (1 = original, 2+ = edited versions)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent Image? @relation("ImageVersions", fields: [parentId], references: [id], onDelete: Cascade)
  versions Image[] @relation("ImageVersions")

  @@map("images")
}

model Video {
  id          String     @id @default(cuid())
  userId      String
  prompt      String
  model       String     // Video model used (Veo, Seedance, etc.)
  url         String     // Storage URL
  thumbnailUrl String?   // Video thumbnail
  duration    Int?       // Duration in seconds
  width       Int?
  height      Int?
  size        Int?       // File size in bytes
  status      VideoStatus @default(PROCESSING)
  metadata    Json?      // Generation parameters
  isPublic    Boolean    @default(false)
  tags        Json       @default("[]")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("videos")
}

model ApiUsage {
  id              String   @id @default(cuid())
  userId          String
  model           String   // Model used
  provider        String   // openai, anthropic, google, etc.
  inputTokens     Int
  outputTokens    Int
  totalTokens     Int
  cost            Float    // Cost in USD
  requestType     String   // chat, completion, image, video, etc.
  endpoint        String   // API endpoint used
  responseTime    Int?     // Response time in milliseconds
  metadata        Json?    // Additional usage data
  createdAt       DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_usage")
}

model Subscription {
  id                   String            @id @default(cuid())
  userId               String?
  teamId               String?           // Team subscription
  stripeCustomerId     String?
  stripeSubscriptionId String?           @unique
  stripePriceId        String?
  plan                 Plan
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean           @default(false)
  trialEnd             DateTime?
  discountPercent      Float?            // Enterprise discount
  customPrice          Float?            // Custom enterprise pricing
  billingCycle         BillingCycle      @default(MONTHLY)
  autoRenew            Boolean           @default(true)
  metadata             Json?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  // Relationships
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]
  usageRecords UsageRecord[]

  @@map("subscriptions")
}

model Invoice {
  id               String        @id @default(cuid())
  subscriptionId   String
  stripeInvoiceId  String?       @unique
  invoiceNumber    String        @unique
  status           InvoiceStatus @default(DRAFT)
  subtotal         Float         // Before tax and discounts
  discountAmount   Float         @default(0)
  taxAmount        Float         @default(0)
  total            Float
  currency         String        @default("USD")
  periodStart      DateTime
  periodEnd        DateTime
  dueDate          DateTime
  paidAt           DateTime?
  metadata         Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relationships
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  lineItems    InvoiceLineItem[]
  payments     Payment[]

  @@map("invoices")
}

model InvoiceLineItem {
  id          String   @id @default(cuid())
  invoiceId   String
  description String
  quantity    Float    @default(1)
  unitPrice   Float
  amount      Float
  metadata    Json?
  createdAt   DateTime @default(now())

  // Relationships
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_line_items")
}

model Payment {
  id              String        @id @default(cuid())
  invoiceId       String
  stripePaymentId String?       @unique
  amount          Float
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  method          String?       // card, bank_transfer, etc.
  paidAt          DateTime?
  failureReason   String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model UsageRecord {
  id             String   @id @default(cuid())
  subscriptionId String
  userId         String
  model          String
  requestType    String   // chat, image, video, etc.
  quantity       Int      // Number of requests/tokens
  unitCost       Float    // Cost per unit
  totalCost      Float    // quantity * unitCost
  timestamp      DateTime @default(now())
  metadata       Json?

  // Relationships
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("usage_records")
}

model BillingAddress {
  id           String   @id @default(cuid())
  userId       String   @unique
  company      String?
  line1        String
  line2        String?
  city         String
  state        String?
  postalCode   String
  country      String
  taxId        String?  // VAT/Tax ID for business
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  @@map("billing_addresses")
}

// model Agent {
//   id               String      @id @default(cuid())
//   userId           String
//   name             String
//   description      String      @default("")
//   avatar           String?
//   personality      Json        // Personality configuration
//   availableTools   Json        @default("[]") // Array of tool IDs
//   systemPrompt     String      @default("")
//   maxTokens        Int         @default(4000)
//   temperature      Float       @default(0.7)
//   topP             Float       @default(0.9)
//   model            String      @default("gpt-4")
//   enabled          Boolean     @default(true)
//   autoStart        Boolean     @default(false)
//   triggerKeywords  Json        @default("[]") // Array of keywords
//   permissions      Json        // Permissions configuration
//   memory           Json        @default("{}") // Agent memory
//   templateId       String?     // Source template if created from template
//   executionCount   Int         @default(0)
//   lastExecutedAt   DateTime?
//   createdAt        DateTime    @default(now())
//   updatedAt        DateTime    @updatedAt

//   // Relationships
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   executions AgentExecution[]

//   @@map("agents")
// }

// model AgentExecution {
//   id              String            @id @default(cuid())
//   agentId         String
//   userId          String
//   taskDescription String            @default("")
//   status          AgentExecutionStatus @default(PENDING)
//   steps           Json              @default("[]") // Array of execution steps
//   totalCost       Float             @default(0.0)
//   tokensUsed      Int               @default(0)
//   result          Json?             // Execution result
//   startTime       DateTime          @default(now())
//   endTime         DateTime?
//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime          @updatedAt

//   // Relationships
//   agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

//   @@map("agent_executions")
// }

// Enums
model Team {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  description  String?
  avatar       String?
  plan         Plan     @default(TEAM)
  credits      Int      @default(5000)
  maxMembers   Int      @default(10)
  ownerId      String
  settings     String   @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  owner       User             @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     User[]           @relation("TeamMembers")
  invitations TeamInvitation[]
  usage       TeamUsage[]

  @@map("teams")
}

model TeamInvitation {
  id           String           @id @default(cuid())
  teamId       String
  inviterId    String
  inviteeId    String?          // null if invited by email
  email        String
  role         TeamRole         @default(MEMBER)
  status       InvitationStatus @default(PENDING)
  token        String           @unique
  expiresAt    DateTime
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relationships
  team     Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  inviter  User  @relation("InvitationSender", fields: [inviterId], references: [id], onDelete: Cascade)
  invitee  User? @relation("InvitationReceiver", fields: [inviteeId], references: [id], onDelete: SetNull)

  @@map("team_invitations")
}

model TeamUsage {
  id           String   @id @default(cuid())
  teamId       String
  userId       String   // Member who used credits
  model        String   // Model used
  credits      Int      // Credits consumed
  requestType  String   // chat, image, video, etc.
  metadata     Json?    // Additional usage data
  createdAt    DateTime @default(now())

  // Relationships
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("team_usage")
}

model AdminAction {
  id           String   @id @default(cuid())
  adminId      String
  action       String   // Action type (PLAN_UPDATE, CREDITS_UPDATE, etc.)
  targetUserId String?  // Target user if applicable
  details      Json?    // Action details
  createdAt    DateTime @default(now())

  // Relationships
  admin User @relation(fields: [adminId], references: [clerkId], onDelete: Cascade)

  @@map("admin_actions")
}

enum Plan {
  FREE
  PRO
  ULTRA
  TEAM
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TeamRole {
  MEMBER
  ADMIN
  OWNER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum TransactionType {
  PURCHASE
  USAGE
  REFUND
  BONUS
  ADJUSTMENT
  ADMIN_GRANT
  ADMIN_DEDUCT
}

enum VideoStatus {
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
  PAUSED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
}

// enum AgentExecutionStatus {
//   PENDING
//   RUNNING
//   COMPLETED
//   FAILED
//   CANCELLED
// }